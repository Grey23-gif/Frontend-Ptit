let str = [];
let choice;
do {
    choice = parseInt(prompt(`
================ MENU ================
1Ô∏è‚É£  Nh·∫≠p chu·ªói
2Ô∏è‚É£  Hi·ªÉn th·ªã chu·ªói
3Ô∏è‚É£  T√¨m t·∫•t c·∫£ c√°c t·ª´ con tr√πng l·∫∑p trong chu·ªói v√† s·ªë l·∫ßn xu·∫•t hi·ªán
4Ô∏è‚É£  T√¨m c√°c t·ª´ c√≥ ƒë·ªô d√†i l·ªõn nh·∫•t v√† nh·ªè nh·∫•t trong chu·ªói
5Ô∏è‚É£  T√¨m s·ªë l·∫ßn xu·∫•t hi·ªán nhi·ªÅu nh·∫•t c·ªßa c√°c k√Ω t·ª± trong chu·ªói
6Ô∏è‚É£  Chuy·ªÉn ƒë·ªïi chu·ªói k√Ω t·ª± th√†nh d·∫°ng snake_case
7Ô∏è‚É£  ‚ùå Tho√°t
=========================================
üîπ Vui l√≤ng nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn c·ªßa b·∫°n:`));
switch(choice)
{   
    case 1:
    {
        str = prompt("Nh·∫≠p chu·ªói:");
        alert(`Chu·ªói ƒë√£ nh·∫≠p: ${str}`);
        break;
    }
    case 2:
    {
        alert(`Chu·ªói:\n${str.length ? str : "Chu·ªói tr·ªëng"}`);   
        break;
    }
    case 3:
    {
        if (str.length === 0) {
            alert("Chu·ªói tr·ªëng!");
            break;
        }
        let words = str.trim().split(/\s+/);
        let wordCount = {};
        for (let word of words) {
            if (word in wordCount) {
                wordCount[word]++;
            } else {
                wordCount[word] = 1;
            }
        }
        let duplicates = Object.entries(wordCount).filter(([word, count]) => count > 1);
        alert(`T·∫•t c·∫£ c√°c t·ª´ con tr√πng l·∫∑p trong chu·ªói v√† s·ªë l·∫ßn xu·∫•t hi·ªán:\n${duplicates.map(([word, count]) => `${word}: ${count} l·∫ßn`).join("\n")}`);
        break;  
    }
    case 4:
    {
        if (str.length === 0) {
            alert("Chu·ªói tr·ªëng!");
            break;
        }
        let words = str.trim().split(/\s+/);
        let lengths = words.map(word => word.length);
        let maxLength = Math.max(...lengths);
        let minLength = Math.min(...lengths);
        let longestWords = words.filter(word => word.length === maxLength);
        let shortestWords = words.filter(word => word.length === minLength);
        alert(`C√°c t·ª´ c√≥ ƒë·ªô d√†i l·ªõn nh·∫•t: ${longestWords.join(", ")}\nC√°c t·ª´ c√≥ ƒë·ªô d√†i nh·ªè nh·∫•t: ${shortestWords.join(", ")}`);
        break;
    }
    case 5:
    {
        if (str.length === 0) {
            alert("Chu·ªói tr·ªëng!");
            break;
        }
        let charCount = {};
        for (let char of str) {
            if (char in charCount) {
                charCount[char]++;
            } else {
                charCount[char] = 1;
            }
        }
        let maxCount = Math.max(...Object.values(charCount));
        let mostFrequentChars = Object.entries(charCount).filter(([char, count]) => count === maxCount);
        alert(`S·ªë l·∫ßn xu·∫•t hi·ªán nhi·ªÅu nh·∫•t c·ªßa c√°c k√Ω t·ª± trong chu·ªói:\n${mostFrequentChars.map(([char, count]) => `${char}: ${count} l·∫ßn`).join("\n")}`);
        break;
    }
    case 6:
    {
        if (str.length === 0) {
            alert("Chu·ªói tr·ªëng!");
            break;
        }
        let snakeCase = str.split("").map(char => char === char.toUpperCase() ? `_${char.toLowerCase()}` : char).join("");
        alert(`Chu·ªói sau khi chuy·ªÉn ƒë·ªïi: ${snakeCase}`);
        break;
    }
    case 7:
    {
        alert("T·∫°m bi·ªát!");
        break;
    }
    default:
    {
        alert("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
        break; 
    }
}
    
}while(choice !== 7);