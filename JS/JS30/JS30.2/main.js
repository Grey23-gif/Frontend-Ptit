function Book(id, name, price, quantity, category) {
    this.id = id;
    this.name = name;
    this.price = price;
    this.quantity = quantity;
    this.category = category;
}

let BookManager = {
    books: [],
    cart: [],

    displayBooksByCategory: function () {
        let category = prompt("Nh·∫≠p th·ªÉ lo·∫°i s√°ch c·∫ßn xem:");
        let filteredBooks = this.books.filter(book => book.category.toLowerCase() === category.toLowerCase());

        if (filteredBooks.length > 0) {
            let bookList = filteredBooks.map(book =>
                `ID: ${book.id}, T√™n: ${book.name}, Gi√°: ${book.price}, S·ªë l∆∞·ª£ng: ${book.quantity}, Th·ªÉ lo·∫°i: ${book.category}`
            ).join("\n");
            alert(`Danh s√°ch s√°ch trong th·ªÉ lo·∫°i "${category}":\n${bookList}`);
        } else {
            alert(`Kh√¥ng t√¨m th·∫•y s√°ch trong th·ªÉ lo·∫°i "${category}".`);
        }
    },

    // Th√™m s√°ch m·ªõi v√†o kho
    addBook: function () {
        let id = parseInt(prompt("Nh·∫≠p ID s√°ch:"));
        let name = prompt("Nh·∫≠p t√™n s√°ch:");
        let price = parseFloat(prompt("Nh·∫≠p gi√° s√°ch:"));
        let quantity = parseInt(prompt("Nh·∫≠p s·ªë l∆∞·ª£ng s√°ch:"));
        let category = prompt("Nh·∫≠p th·ªÉ lo·∫°i s√°ch:");

        this.books.push(new Book(id, name, price, quantity, category));
        alert(`S√°ch "${name}" ƒë√£ ƒë∆∞·ª£c th√™m v√†o kho.`);
    },

    // T√¨m ki·∫øm s√°ch theo t√™n ho·∫∑c ID
    searchBook: function () {
        let keyword = prompt("Nh·∫≠p t√™n ho·∫∑c ID s√°ch c·∫ßn t√¨m:");
        let result = this.books.filter(book =>
            book.name.toLowerCase().includes(keyword.toLowerCase()) || book.id.toString() === keyword
        );

        if (result.length > 0) {
            let bookList = result.map(book =>
                `ID: ${book.id}, T√™n: ${book.name}, Gi√°: ${book.price}, S·ªë l∆∞·ª£ng: ${book.quantity}, Th·ªÉ lo·∫°i: ${book.category}`
            ).join("\n");
            alert(`K·∫øt qu·∫£ t√¨m ki·∫øm:\n${bookList}`);
        } else {
            alert("Kh√¥ng t√¨m th·∫•y s√°ch ph√π h·ª£p.");
        }
    },

    // Mua s√°ch
    buyBook: function () {
        let id = parseInt(prompt("Nh·∫≠p ID s√°ch c·∫ßn mua:"));
        let quantity = parseInt(prompt("Nh·∫≠p s·ªë l∆∞·ª£ng c·∫ßn mua:"));
        let book = this.books.find(book => book.id === id);

        if (book) {
            if (book.quantity >= quantity) {
                book.quantity -= quantity;
                this.cart.push({ id: book.id, name: book.name, price: book.price, quantity: quantity });
                alert(`B·∫°n ƒë√£ mua ${quantity} cu·ªën s√°ch "${book.name}".`);
            } else {
                alert("S·ªë l∆∞·ª£ng s√°ch trong kho kh√¥ng ƒë·ªß.");
            }
        } else {
            alert("Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID n√†y.");
        }
    },

    // S·∫Øp x·∫øp s√°ch theo gi√°
    sortBooksByPrice: function (order) {
        if (order === "asc") {
            this.books.sort((a, b) => a.price - b.price);
            alert("S√°ch ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo gi√° tƒÉng d·∫ßn.");
        } else if (order === "desc") {
            this.books.sort((a, b) => b.price - a.price);
            alert("S√°ch ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo gi√° gi·∫£m d·∫ßn.");
        }
        this.displayAllBooks();
    },

    // Hi·ªÉn th·ªã t·∫•t c·∫£ s√°ch
    displayAllBooks: function () {
        if (this.books.length === 0) {
            alert("Kho s√°ch hi·ªán ƒëang tr·ªëng.");
        } else {
            let bookList = this.books.map(book =>
                `ID: ${book.id}, T√™n: ${book.name}, Gi√°: ${book.price}, S·ªë l∆∞·ª£ng: ${book.quantity}, Th·ªÉ lo·∫°i: ${book.category}`
            ).join("\n");
            alert(`Danh s√°ch s√°ch trong kho:\n${bookList}`);
        }
    },

    // T√≠nh t·ªïng s·ªë l∆∞·ª£ng s√°ch ƒë√£ mua v√† t·ªïng ti·ªÅn
    calculateCart: function () {
        if (this.cart.length === 0) {
            alert("Gi·ªè h√†ng hi·ªán ƒëang tr·ªëng.");
        } else {
            let totalQuantity = this.cart.reduce((sum, item) => sum + item.quantity, 0);
            let totalPrice = this.cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
            alert(`T·ªïng s·ªë l∆∞·ª£ng s√°ch ƒë√£ mua: ${totalQuantity}\nT·ªïng ti·ªÅn: ${totalPrice} VND`);
        }
    },

    // Hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£ng s√°ch trong kho
    displayTotalQuantity: function () {
        let totalQuantity = this.books.reduce((sum, book) => sum + book.quantity, 0);
        alert(`T·ªïng s·ªë l∆∞·ª£ng s√°ch trong kho: ${totalQuantity}`);
    }
};

// Menu ch·ª©c nƒÉng
let choice;

do {
    choice = parseInt(prompt(`
======== üìö QU·∫¢N L√ù S√ÅCH =========
1Ô∏è‚É£  Hi·ªÉn th·ªã danh s√°ch s√°ch theo th·ªÉ lo·∫°i.
2Ô∏è‚É£  Th√™m s√°ch m·ªõi v√†o kho.
3Ô∏è‚É£  T√¨m ki·∫øm s√°ch theo t√™n ho·∫∑c ID.
4Ô∏è‚É£  Mua s√°ch.
5Ô∏è‚É£  S·∫Øp x·∫øp s√°ch theo gi√° (1: TƒÉng d·∫ßn, 2: Gi·∫£m d·∫ßn).
6Ô∏è‚É£  T√≠nh t·ªïng s·ªë l∆∞·ª£ng s√°ch ƒë√£ mua v√† t·ªïng ti·ªÅn.
7Ô∏è‚É£  Hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£ng s√°ch trong kho.
8Ô∏è‚É£  ‚ùå Tho√°t
==================================
üîπ Vui l√≤ng nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn c·ªßa b·∫°n:`));

    switch (choice) {
        case 1:
            BookManager.displayBooksByCategory();
            break;
        case 2:
            BookManager.addBook();
            break;
        case 3:
            BookManager.searchBook();
            break;
        case 4:
            BookManager.buyBook();
            break;
        case 5:
            let order = prompt("Nh·∫≠p 1 ƒë·ªÉ s·∫Øp x·∫øp tƒÉng d·∫ßn, 2 ƒë·ªÉ s·∫Øp x·∫øp gi·∫£m d·∫ßn:");
            BookManager.sortBooksByPrice(order === "1" ? "asc" : "desc");
            break;
        case 6:
            BookManager.calculateCart();
            break;
        case 7:
            BookManager.displayTotalQuantity();
            break;
        case 8:
            alert("Tho√°t ch∆∞∆°ng tr√¨nh.");
            break;
        default:
            alert("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p l·∫°i!");
    }
} while (choice !== 8);