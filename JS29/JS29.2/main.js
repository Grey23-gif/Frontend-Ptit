// ƒê·ªëi t∆∞·ª£ng Product
function Product(id, name, price, category, quantity) {
    this.id = id;
    this.name = name;
    this.price = price;
    this.category = category;
    this.quantity = quantity;
}

// Qu·∫£n l√Ω s·∫£n ph·∫©m
let ProductManager = {
    products: [],

    // Th√™m s·∫£n ph·∫©m m·ªõi
    addProduct: function () {
        let id = parseInt(prompt("Nh·∫≠p ID s·∫£n ph·∫©m:"));
        let name = prompt("Nh·∫≠p t√™n s·∫£n ph·∫©m:");
        let price = parseFloat(prompt("Nh·∫≠p gi√° s·∫£n ph·∫©m:"));
        let category = prompt("Nh·∫≠p danh m·ª•c s·∫£n ph·∫©m:");
        let quantity = parseInt(prompt("Nh·∫≠p s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho:"));

        this.products.push(new Product(id, name, price, category, quantity));
        alert(`S·∫£n ph·∫©m ${name} ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!`);
    },

    // Hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m
    displayProducts: function () {
        if (this.products.length === 0) {
            alert("Danh s√°ch s·∫£n ph·∫©m tr·ªëng.");
        } else {
            let productList = this.products.map(product => 
                `ID: ${product.id}, T√™n: ${product.name}, Gi√°: ${product.price}, Danh m·ª•c: ${product.category}, S·ªë l∆∞·ª£ng: ${product.quantity}`
            ).join("\n");
            alert(`Danh s√°ch s·∫£n ph·∫©m:\n${productList}`);
        }
    },

    // Hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m theo ID
    displayProductById: function () {
        let id = parseInt(prompt("Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn xem chi ti·∫øt:"));
        let product = this.products.find(product => product.id === id);

        if (product) {
            alert(`Chi ti·∫øt s·∫£n ph·∫©m:\nID: ${product.id}, T√™n: ${product.name}, Gi√°: ${product.price}, Danh m·ª•c: ${product.category}, S·ªë l∆∞·ª£ng: ${product.quantity}`);
        } else {
            alert("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID n√†y.");
        }
    },

    // C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m theo ID
    updateProduct: function () {
        let id = parseInt(prompt("Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t:"));
        let product = this.products.find(product => product.id === id);

        if (product) {
            product.name = prompt(`Nh·∫≠p t√™n m·ªõi (hi·ªán t·∫°i: ${product.name}):`) || product.name;
            product.price = parseFloat(prompt(`Nh·∫≠p gi√° m·ªõi (hi·ªán t·∫°i: ${product.price}):`)) || product.price;
            product.category = prompt(`Nh·∫≠p danh m·ª•c m·ªõi (hi·ªán t·∫°i: ${product.category}):`) || product.category;
            product.quantity = parseInt(prompt(`Nh·∫≠p s·ªë l∆∞·ª£ng m·ªõi (hi·ªán t·∫°i: ${product.quantity}):`)) || product.quantity;
            alert("Th√¥ng tin s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.");
        } else {
            alert("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID n√†y.");
        }
    },

    // X√≥a s·∫£n ph·∫©m theo ID
    deleteProduct: function () {
        let id = parseInt(prompt("Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn x√≥a:"));
        let index = this.products.findIndex(product => product.id === id);

        if (index !== -1) {
            let confirmDelete = confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m ${this.products[index].name}?`);
            if (confirmDelete) {
                this.products.splice(index, 1);
                alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.");
            }
        } else {
            alert("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID n√†y.");
        }
    },

    // L·ªçc s·∫£n ph·∫©m theo kho·∫£ng gi√°
    filterProductsByPrice: function () {
        let minPrice = parseFloat(prompt("Nh·∫≠p gi√° t·ªëi thi·ªÉu:"));
        let maxPrice = parseFloat(prompt("Nh·∫≠p gi√° t·ªëi ƒëa:"));
        let filteredProducts = this.products.filter(product => product.price >= minPrice && product.price <= maxPrice);

        if (filteredProducts.length > 0) {
            let productList = filteredProducts.map(product => 
                `ID: ${product.id}, T√™n: ${product.name}, Gi√°: ${product.price}, Danh m·ª•c: ${product.category}, S·ªë l∆∞·ª£ng: ${product.quantity}`
            ).join("\n");
            alert(`S·∫£n ph·∫©m trong kho·∫£ng gi√° t·ª´ ${minPrice} ƒë·∫øn ${maxPrice}:\n${productList}`);
        } else {
            alert("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong kho·∫£ng gi√° n√†y.");
        }
    }
};

// Menu ch·ª©c nƒÉng
let choice;

do {
    choice = parseInt(prompt(`
======== üõí QU·∫¢N L√ù S·∫¢N PH·∫®M =========
1Ô∏è‚É£  Th√™m s·∫£n ph·∫©m m·ªõi.
2Ô∏è‚É£  Hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m.
3Ô∏è‚É£  Hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m theo ID.
4Ô∏è‚É£  C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m theo ID.
5Ô∏è‚É£  X√≥a s·∫£n ph·∫©m theo ID.
6Ô∏è‚É£  L·ªçc s·∫£n ph·∫©m theo kho·∫£ng gi√°.
7Ô∏è‚É£  ‚ùå Tho√°t
=====================================
üîπ Vui l√≤ng nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn c·ªßa b·∫°n:`));

    switch (choice) {
        case 1:
            ProductManager.addProduct();
            break;
        case 2:
            ProductManager.displayProducts();
            break;
        case 3:
            ProductManager.displayProductById();
            break;
        case 4:
            ProductManager.updateProduct();
            break;
        case 5:
            ProductManager.deleteProduct();
            break;
        case 6:
            ProductManager.filterProductsByPrice();
            break;
        case 7:
            alert("Tho√°t ch∆∞∆°ng tr√¨nh.");
            break;
        default:
            alert("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p l·∫°i!");
    }
} while (choice !== 7);