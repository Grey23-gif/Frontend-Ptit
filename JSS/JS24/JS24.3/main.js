let choice;
let arr = [];
do {
    choice = parseInt(prompt(`
================ MENU ================
1Ô∏è‚É£  Nh·∫≠p m·∫£ng s·ªë nguy√™n
2Ô∏è‚É£  Hi·ªÉn th·ªã m·∫£ng
3Ô∏è‚É£  T√¨m ph·∫ßn t·ª≠ l·ªõn nh·∫•t trong m·∫£ng v√† in ra ch·ªâ s·ªë c·ªßa n√≥
4Ô∏è‚É£  T√≠nh t·ªïng v√† trung b√¨nh c·ªông c·ªßa c√°c s·ªë d∆∞∆°ng trong m·∫£ng
5Ô∏è‚É£  ƒê·∫£o ng∆∞·ª£c m·∫£ng
6Ô∏è‚É£  Ki·ªÉm tra m·∫£ng c√≥ ƒë·ªëi x·ª©ng kh√¥ng
7Ô∏è‚É£  ‚ùå Tho√°t
=========================================
üîπ Vui l√≤ng nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn c·ªßa b·∫°n:`));
switch(choice)
{
    case 1:
    {
        let n = parseInt(prompt("Nh·∫≠p s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠:"));
        if (isNaN(n) || n < 1) {
            alert("S·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ kh√¥ng h·ª£p l·ªá!");
            break;
        }
        arr = [];
        for (let i = 0; i < n; i++) {
            let num = parseInt(prompt(`Nh·∫≠p s·ªë th·ª© ${i + 1}:`));
            arr.push(num);
        }
        alert(`M·∫£ng ƒë√£ nh·∫≠p: ${arr.join(", ")}`);
        break;
    }
    case 2:
    {
        alert(`C√°c ph·∫ßn t·ª≠ trong m·∫£ng: ${arr.length ? arr.join(", ") : "M·∫£ng tr·ªëng"}`);
        break;
    }
    case 3:
    {
        if (arr.length === 0) {
            alert("M·∫£ng tr·ªëng!");
            break;
        }
        let max = arr[0];
        let index = 0;
        for (let i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
                index = i;
            }
        }
        alert(`Ph·∫ßn t·ª≠ l·ªõn nh·∫•t trong m·∫£ng: ${max}\nCh·ªâ s·ªë c·ªßa n√≥: ${index}`);
        break;
    }
    case 4:
    {
        if (arr.length === 0) {
            alert("M·∫£ng tr·ªëng!");
            break;
        }
        let positiveNumbers = arr.filter(num => num > 0);
        if (positiveNumbers.length === 0) {
            alert("Kh√¥ng c√≥ s·ªë d∆∞∆°ng trong m·∫£ng!");
            break;
        }
        let sum = 0;
        positiveNumbers.forEach(num => sum += num);
        let avg = sum / positiveNumbers.length;
        alert(`T·ªïng c√°c s·ªë d∆∞∆°ng trong m·∫£ng: ${sum}\nTrung b√¨nh c·ªông c·ªßa c√°c s·ªë d∆∞∆°ng trong m·∫£ng: ${avg}`);
        break;
    }
    case 5:
    {
        if (arr.length === 0) {
            alert("M·∫£ng tr·ªëng!");
            break;
        }
        let reversedArr = arr.slice().reverse();
        alert(`M·∫£ng sau khi ƒë·∫£o ng∆∞·ª£c: ${reversedArr.join(", ")}`);
        break;
    }
    case 6:
    {
        if (arr.length === 0) {
            alert("M·∫£ng tr·ªëng!");
            break;
        }
        let isSymmetric = true;
        for (let i = 0; i < arr.length / 2; i++) {
            if (arr[i] !== arr[arr.length - 1 - i]) {
                isSymmetric = false;
                break;
            }
        }
        alert(`M·∫£ng ${isSymmetric ? "ƒë·ªëi x·ª©ng" : "kh√¥ng ƒë·ªëi x·ª©ng"}`);
        break;
    }
    case 7:
    {
        alert("T·∫°m bi·ªát!");
        break;
    }
    default:
    {
        alert("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
        break;
    }
}

}while (choice !== 7);