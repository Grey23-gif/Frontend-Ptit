// ƒê·ªëi t∆∞·ª£ng ƒëi·ªán tho·∫°i
function Phone(id, name, price, quantity, company) {
    this.id = id;
    this.name = name;
    this.price = price;
    this.quantity = quantity;
    this.company = company;
}

// Qu·∫£n l√Ω c·ª≠a h√†ng ƒëi·ªán tho·∫°i
let PhoneManager = {
    phones: [],
    cart: [],

    // Hi·ªÉn th·ªã danh s√°ch ƒëi·ªán tho·∫°i theo h√£ng
    displayPhonesByCompany: function () {
        let company = prompt("Nh·∫≠p t√™n h√£ng ƒëi·ªán tho·∫°i b·∫°n mu·ªën xem:");
        let filteredPhones = this.phones.filter(phone => phone.company.toLowerCase() === company.toLowerCase());
        if (filteredPhones.length > 0) {
            let phoneList = filteredPhones.map(phone =>
                `ID: ${phone.id}, T√™n: ${phone.name}, Gi√°: ${phone.price}, S·ªë l∆∞·ª£ng: ${phone.quantity}, H√£ng: ${phone.company}`
            ).join("\n");
            alert(`Danh s√°ch ƒëi·ªán tho·∫°i c·ªßa h√£ng "${company}":\n${phoneList}`);
        } else {
            alert(`Kh√¥ng c√≥ ƒëi·ªán tho·∫°i n√†o c·ªßa h√£ng "${company}".`);
        }
    },

    // Th√™m ƒëi·ªán tho·∫°i m·ªõi v√†o c·ª≠a h√†ng
    addPhone: function () {
        let id = parseInt(prompt("Nh·∫≠p ID ƒëi·ªán tho·∫°i:"));
        let name = prompt("Nh·∫≠p t√™n ƒëi·ªán tho·∫°i:");
        let price = parseFloat(prompt("Nh·∫≠p gi√° ƒëi·ªán tho·∫°i:"));
        let quantity = parseInt(prompt("Nh·∫≠p s·ªë l∆∞·ª£ng ƒëi·ªán tho·∫°i:"));
        let company = prompt("Nh·∫≠p h√£ng ƒëi·ªán tho·∫°i:");

        this.phones.push(new Phone(id, name, price, quantity, company));
        alert(`ƒêi·ªán tho·∫°i "${name}" ƒë√£ ƒë∆∞·ª£c th√™m v√†o c·ª≠a h√†ng.`);
    },

    // T√¨m ki·∫øm ƒëi·ªán tho·∫°i theo t√™n ho·∫∑c ID
    searchPhone: function () {
        let keyword = prompt("Nh·∫≠p t√™n ho·∫∑c ID ƒëi·ªán tho·∫°i c·∫ßn t√¨m:");
        let result = this.phones.filter(phone =>
            phone.name.toLowerCase().includes(keyword.toLowerCase()) || phone.id.toString() === keyword
        );

        if (result.length > 0) {
            let phoneList = result.map(phone =>
                `ID: ${phone.id}, T√™n: ${phone.name}, Gi√°: ${phone.price}, S·ªë l∆∞·ª£ng: ${phone.quantity}, H√£ng: ${phone.company}`
            ).join("\n");
            alert(`K·∫øt qu·∫£ t√¨m ki·∫øm:\n${phoneList}`);
        } else {
            alert("Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i ph√π h·ª£p.");
        }
    },

    // Mua ƒëi·ªán tho·∫°i
    buyPhone: function () {
        let id = parseInt(prompt("Nh·∫≠p ID ƒëi·ªán tho·∫°i c·∫ßn mua:"));
        let quantity = parseInt(prompt("Nh·∫≠p s·ªë l∆∞·ª£ng c·∫ßn mua:"));
        let phone = this.phones.find(phone => phone.id === id);

        if (phone) {
            if (phone.quantity >= quantity) {
                phone.quantity -= quantity;
                this.cart.push({ id: phone.id, name: phone.name, price: phone.price, quantity: quantity });
                alert(`B·∫°n ƒë√£ mua ${quantity} chi·∫øc ƒëi·ªán tho·∫°i "${phone.name}".`);
            } else {
                alert("S·ªë l∆∞·ª£ng ƒëi·ªán tho·∫°i trong kho kh√¥ng ƒë·ªß.");
            }
        } else {
            alert("Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i v·ªõi ID n√†y.");
        }
    },

    // Thanh to√°n gi·ªè h√†ng
    checkout: function () {
        if (this.cart.length === 0) {
            alert("Gi·ªè h√†ng hi·ªán ƒëang tr·ªëng.");
        } else {
            let total = this.cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
            alert(`Thanh to√°n th√†nh c√¥ng! T·ªïng ti·ªÅn: ${total} VND`);
            this.cart = [];
        }
    },

    // S·∫Øp x·∫øp ƒëi·ªán tho·∫°i theo gi√°
    sortPhonesByPrice: function (order) {
        if (order === "asc") {
            this.phones.sort((a, b) => a.price - b.price);
            alert("ƒêi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo gi√° tƒÉng d·∫ßn.");
        } else if (order === "desc") {
            this.phones.sort((a, b) => b.price - a.price);
            alert("ƒêi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo gi√° gi·∫£m d·∫ßn.");
        }
        this.displayAllPhones();
    },

    // Hi·ªÉn th·ªã t·ªïng s·ªë ti·ªÅn c·ªßa c√°c ƒëi·ªán tho·∫°i trong kho
    calculateTotalValue: function () {
        let totalValue = this.phones.reduce((sum, phone) => sum + phone.price * phone.quantity, 0);
        alert(`T·ªïng gi√° tr·ªã c·ªßa c√°c ƒëi·ªán tho·∫°i trong kho: ${totalValue} VND`);
    },

    // Hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£ng ƒëi·ªán tho·∫°i theo t·ª´ng h√£ng
    displayTotalQuantityByCompany: function () {
        let companyQuantities = {};
        this.phones.forEach(phone => {
            if (!companyQuantities[phone.company]) {
                companyQuantities[phone.company] = 0;
            }
            companyQuantities[phone.company] += phone.quantity;
        });

        let result = Object.entries(companyQuantities).map(([company, quantity]) =>
            `${company}: ${quantity} chi·∫øc`
        ).join("\n");
        alert(`T·ªïng s·ªë l∆∞·ª£ng ƒëi·ªán tho·∫°i theo t·ª´ng h√£ng:\n${result}`);
    },

    // Hi·ªÉn th·ªã t·∫•t c·∫£ ƒëi·ªán tho·∫°i
    displayAllPhones: function () {
        if (this.phones.length === 0) {
            alert("C·ª≠a h√†ng hi·ªán ƒëang tr·ªëng.");
        } else {
            let phoneList = this.phones.map(phone =>
                `ID: ${phone.id}, T√™n: ${phone.name}, Gi√°: ${phone.price}, S·ªë l∆∞·ª£ng: ${phone.quantity}, H√£ng: ${phone.company}`
            ).join("\n");
            alert(`Danh s√°ch ƒëi·ªán tho·∫°i trong c·ª≠a h√†ng:\n${phoneList}`);
        }
    }
};

// Menu ch·ª©c nƒÉng
let choice;

do {
    choice = parseInt(prompt(`
======== üì± QU·∫¢N L√ù C·ª¨A H√ÄNG ƒêI·ªÜN THO·∫†I =========
1Ô∏è‚É£  Hi·ªÉn th·ªã danh s√°ch ƒëi·ªán tho·∫°i theo h√£ng.
2Ô∏è‚É£  Th√™m ƒëi·ªán tho·∫°i m·ªõi v√†o c·ª≠a h√†ng.
3Ô∏è‚É£  T√¨m ki·∫øm ƒëi·ªán tho·∫°i theo t√™n ho·∫∑c ID.
4Ô∏è‚É£  Mua ƒëi·ªán tho·∫°i.
5Ô∏è‚É£  Thanh to√°n gi·ªè h√†ng.
6Ô∏è‚É£  S·∫Øp x·∫øp ƒëi·ªán tho·∫°i theo gi√° (1: TƒÉng d·∫ßn, 2: Gi·∫£m d·∫ßn).
7Ô∏è‚É£  Hi·ªÉn th·ªã t·ªïng s·ªë ti·ªÅn c·ªßa c√°c ƒëi·ªán tho·∫°i trong kho.
8Ô∏è‚É£  Hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£ng ƒëi·ªán tho·∫°i theo t·ª´ng h√£ng.
9Ô∏è‚É£  ‚ùå Tho√°t
===============================================
üîπ Vui l√≤ng nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn c·ªßa b·∫°n:`));

    switch (choice) {
        case 1:
            PhoneManager.displayPhonesByCompany();
            break;
        case 2:
            PhoneManager.addPhone();
            break;
        case 3:
            PhoneManager.searchPhone();
            break;
        case 4:
            PhoneManager.buyPhone();
            break;
        case 5:
            PhoneManager.checkout();
            break;
        case 6:
            let order = prompt("Nh·∫≠p 1 ƒë·ªÉ s·∫Øp x·∫øp tƒÉng d·∫ßn, 2 ƒë·ªÉ s·∫Øp x·∫øp gi·∫£m d·∫ßn:");
            PhoneManager.sortPhonesByPrice(order === "1" ? "asc" : "desc");
            break;
        case 7:
            PhoneManager.calculateTotalValue();
            break;
        case 8:
            PhoneManager.displayTotalQuantityByCompany();
            break;
        case 9:
            alert("Tho√°t ch∆∞∆°ng tr√¨nh.");
            break;
        default:
            alert("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p l·∫°i!");
    }
} while (choice !== 9);